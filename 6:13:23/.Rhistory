}
for (fit in poly.fits) {
print(summary(fit)$r.squared)
}
summary(poly.fits[[8]])
ggplot(Boston, aes(dis, nox))+
geom_point() +
geom_line(aes(x=dis, y=poly.fits[[1]]$fitted.values, col="First"))+
geom_line(aes(x=dis, y=poly.fits[[2]]$fitted.values, col="Second"))+
geom_line(aes(x=dis, y=poly.fits[[3]]$fitted.values, col="Third"))+
geom_line(aes(x=dis, y=poly.fits[[4]]$fitted.values, col="Fourth"))+
geom_line(aes(x=dis, y=poly.fits[[5]]$fitted.values, col="Fifth"))+
geom_line(aes(x=dis, y=poly.fits[[6]]$fitted.values, col="Sixth"))+
geom_line(aes(x=dis, y=poly.fits[[7]]$fitted.values, col="Seventh"))+
geom_line(aes(x=dis, y=poly.fits[[8]]$fitted.values, col="Eighth", lwd=2))+
geom_line(aes(x=dis, y=poly.fits[[9]]$fitted.values, col="Ninth"))+
geom_line(aes(x=dis, y=poly.fits[[10]]$fitted.values, col="Tenth"))+
labs(col="Polynomial Degree")+
scale_color_discrete(breaks=c("First", "Second", "Third", "Fourth", "Fifth",
"Sixth", "Seventh", "Eighth", "Ninth", "Tenth"))
ggplot(Boston, aes(dis, nox))+
geom_point() +
geom_line(aes(x=dis, y=poly.fits[[1]]$fitted.values, col="First"))+
geom_line(aes(x=dis, y=poly.fits[[2]]$fitted.values, col="Second"))+
geom_line(aes(x=dis, y=poly.fits[[3]]$fitted.values, col="Third"))+
geom_line(aes(x=dis, y=poly.fits[[4]]$fitted.values, col="Fourth"))+
geom_line(aes(x=dis, y=poly.fits[[5]]$fitted.values, col="Fifth"))+
geom_line(aes(x=dis, y=poly.fits[[6]]$fitted.values, col="Sixth"))+
geom_line(aes(x=dis, y=poly.fits[[7]]$fitted.values, col="Seventh"))+
geom_line(aes(x=dis, y=poly.fits[[8]]$fitted.values, col="Eighth"))+
geom_line(aes(x=dis, y=poly.fits[[9]]$fitted.values, col="Ninth"))+
geom_line(aes(x=dis, y=poly.fits[[10]]$fitted.values, col="Tenth"))+
labs(col="Polynomial Degree")+
scale_color_discrete(breaks=c("First", "Second", "Third", "Fourth", "Fifth",
"Sixth", "Seventh", "Eighth", "Ninth", "Tenth"))
rsq <- append(rsq, summary(fit)$r.squared)
## (c)
rsq <- c()
for (fit in poly.fits) {
rsq <- append(rsq, summary(fit)$r.squared)
}
rsq
min(rsq)
min(max)
max(rsq)
anova(poly.fits)
lapply(poly.fits, anova)
anova(poly.fits[[1]], poly.fits[[2]], poly.fits[[3]], poly.fits[[4]],
poly.fits[[5]], poly.fits[[6]], poly.fits[[7]], poly.fits[[8]], poly.fits[[9]],
poly.fits[[10]])
rsq
## (d)
nox.spline <- gam(nox~bs(dis, df=4))
## (d)
nox.spline <- gam(nox~bs(dis, df=4), data=Boston)
summary(nox.spline)
plot.Gam(nox.spline)
ggplot(Boston, aes(x=dis, y=nox)) +
geom_point()+
geom_line(x=dis, y=nox.spline$fitted.values)
ggplot(Boston, aes(x=dis, y=nox)) +
geom_point()+
geom_line(x=dis, y=nox.spline$fitted.values)
ggplot(Boston, aes(x=dis, y=nox)) +
geom_point()+
geom_line(Boston, x=dis, y=nox.spline$fitted.values)
ggplot(data=Boston, aes(x=dis, y=nox)) +
geom_point()
ggplot(data=Boston, aes(x=dis, y=nox)) +
geom_point()+
geom_line(aes(x=dis, y=nox.spline$fitted.values))
library(ISLR2)
library(tidyverse)
library(gam)
library(ggcorrplot)
## (e)
df.range <- seq(1, 10)
df.range
## (d)
nox.spline <- gam(nox~bs(dis, df=4), data=Boston)
rss.contain <- c()
for (i in 1:length(df.range)) {
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum(spline.fit$residuals)
}
nox.spline$
## (e)
df.range <- seq(3, 20)
rss.contain <- c()
for (i in df.range) {
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum(spline.fit$residuals)
}
rss.contain
rss.contain <- c()
for (i in df.range) {
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum((spline.fit$residuals)^2)
}
rss.contain
for (i in df.range) {
print(i)
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum((spline.fit$residuals)^2)
}
rss.contain <- c()
for (i in 4:30) {
print(i)
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum((spline.fit$residuals)^2)
}
rss.contain <- c()
for (i in 4:30) {
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum((spline.fit$residuals)^2)
}
rss.contain
for (i in 4:30) {
print(i)
spline.fit <- gam(nox~bs(dis, df=i), data=Boston)
rss.contain[i] <- sum((spline.fit$residuals)^2)
}
rss.contain
which.min(rss.contain)
ggplot(data=Boston, aes(x=dis, y=nox)) +
geom_point()+
geom_line(aes(x=dis, y=gam(nox~bs(dis,df=29), data=Boston)$fitted.values))
k <- 10
cv.error <- matrix(NA, k, 26, dimnames=list(NULL, paste(1:26)))
folds <- sample(rep(1:k, length=nrow(Boston)))
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), subset=Boston[folds!=i], data=Boston)
pred <- predict.Gam(fit.in, Boston[folds==i])
cv.error[j, i] <- mean((Boston$nox-pred)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), subset=Boston[folds!=i,], data=Boston)
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston$nox-pred)^2)
}
}
k <- 10
cv.error <- matrix(NA, k, 26, dimnames=list(NULL, paste(1:26)))
folds <- sample(rep(1:k, length=nrow(Boston)))
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), subset=Boston[folds!=i,], data=Boston)
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston$nox-pred$fit)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston$nox-pred$fit)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston$nox-pred$fit)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston$nox-pred)^2)
}
}
k <- 10
cv.error <- matrix(NA, k, 26, dimnames=list(NULL, paste(1:26)))
folds <- sample(rep(1:k, length=nrow(Boston)))
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston$nox-pred)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston[folds==i]$nox-pred)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston[folds==i,]$nox-pred)^2)
}
}
k <- 10
cv.error <- matrix(NA, k, 26, dimnames=list(NULL, paste(1:26)))
folds <- sample(rep(1:k, length=nrow(Boston)))
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[j, i] <- mean((Boston[folds==i,]$nox-pred)^2)
}
}
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[i, j-3] <- mean((Boston[folds==i,]$nox-pred)^2)
}
}
cv.error <- matrix(NA, k, 27, dimnames=list(NULL, paste(1:27)))
for (i in 1:k) {
for (j in 4:30) {
fit.in <- gam(nox~bs(dis, df=j), data=Boston[folds!=i,])
pred <- predict.Gam(fit.in, Boston[folds==i,])
cv.error[i, j-3] <- mean((Boston[folds==i,]$nox-pred)^2)
}
}
View(cv.error)
rowMeans(cv.error)
colMeans(cv.error)
which.min(colMeans(cv.error))
best.spline <- gam(nox~bs(dis,df=6), data=Boston)
summary(best.spline)
ggplot(data=Boston, aes(x=dis, y=nox)) +
geom_point()+
geom_line(aes(x=dis, y=best.spline$fitted.values))
# 5
## (a)
train <- sample(c(T, F), length=nrow(College), replace=T)
# 5
## (a)
train <- sample(c(T, F), size=nrow(College), replace=T)
train
test <- (-train)
library(leaps)
colnames(College)
regfit.fwd <- regsubsets(Outstate~., data=College, nvmax=17, method="forward")
summary(regfit.fwd)
regfit.fwd$rss
which.min(regfit.fwd$rss)
coef(regfit.fwd, 18)
coefs(regfit.fwd, 18)
coef(regfit.fwd, 17)
regfit.fwd <- regsubsets(Outstate~., data=College[train,], nvmax=17, method="forward")
which.min(regfit.fwd$rss)
reg.matrix <- model.matrix(Outstate~., data=College[test,])
train <- sample(c(T, F), size=nrow(College), replace=T)
test <- (-train)
reg.matrix <- model.matrix(Outstate~., data=College[test,])
regfit.fwd <- regsubsets(Outstate~., data=College[train,], nvmax=17, method="forward")
val.error <- rep(NA, 17)
for (i in 1:17) {
coefi <- coefs(regfit.fwd, id=i)
pred <- reg.matrix[, names(coefi)] %*% coefi
val.error[i] <- mean((College$outstate[test]-pred)^2)
}
for (i in 1:17) {
coefi <- coef(regfit.fwd, id=i)
pred <- reg.matrix[, names(coefi)] %*% coefi
val.error[i] <- mean((College$outstate[test]-pred)^2)
}
val.error
for (i in 1:17) {
coefi <- coef(regfit.fwd, id=i)
pred <- reg.matrix[, names(coefi)] %*% coefi
val.error[i] <- mean((College$Outstate[test]-pred)^2)
}
val.error
which.min(val.error)
coef(regfit.fwd, id=14)
## (b)
colnames(College)
college.gam <- gam(Outstate~Private+Apps+Accept+Enroll+Top10perc+F.Undergrad+Room.Board+
Personal+PhD+Terminal+S.F.Ratio+perc.alumni+Expend+Grad.Rate, data=College)
summary(college.gam)
plot(College$Private, College$Outstate)
plot(College$Private, College$Outstate)
plot(College$Apps, College$Outstate)
plot(College$Accept, College$Outstate)
plot(College$Enroll, College$Outstate)
plot(College$Top10perc, College$Outstate)
plot(College$F.Undergrad, College$Outstate)
plot(College$Room.Board, College$Outstate)
plot(College$Personal, College$Outstate)
plot(College$PhD, College$Outstate)
plot(College$S.F.Ratio, College$Outsate)
plot(College$perc.alumni, College$Outstate)
plot(College$Expend, College$Outstate)
plot(College$Grad.Rate, College$Outstate)
# ------ Load Libraries
library(tidyverse)
# ------ Load Data
data <- read.csv("Moz_SAFI_Survey_Final_results.csv")
# ------ Load Data
data <- read.csv("/Moz_SAFI_Survey_Final_results.csv")
getwd()
setwd("/Users/jadenthomas/Desktop/Personal Projects/R/TIdy-Tuesday/6:13:23")
# ------ Load Data
data <- read.csv("/Moz_SAFI_Survey_Final_results.csv")
getwd()
setwd("/Users/jadenthomas/Desktop/Personal Projects/R/TIdy-Tuesday/6:13:23/")
# ------ Load Data
data <- read.csv("Moz_SAFI_Survey_Final_results.csv")
View(data)
# ------ Basic First Glance EDA
summary(data)
str(data)
sum(is.null(data))
# ------ Remove Columns
colnames(data)
data.keep <- data %>% select(A06_province, A07_district, A08_ward, A09_village, A11_years_farm, B_no_membrs,
B17_parents_liv, B18_sp_parents_liv, B19_grand_liv, B20_sp_grand_liv,
C05_buildings_in_compound, C06_rooms, C07_other_buildings,
D_no_plots, E01_water_use, E_no_group_count, E_yes_group_count,
E17_no_enough_water, E_18_months_no_water, E19_period_use, E25_fees_water, F04_need_money,
F05_money_source, F05_money_source_other, F06_crops_contr, F08_emply_lab, F09_du_labour,
F10_liv_owned, F10_liv_owned_other, F_liv_count, F12_poultry, F14_items_owned,
F14_items_owned_other, G01_no_meals, G02_months_lack_food, gps.Latitude, gps.Longitude,
gps.Altitude, gps.Accuracy)
data.keep <- data %>% select(A06_province, A07_district, A08_ward, A09_village, A11_years_farm, B_no_membrs,
B17_parents_liv, B18_sp_parents_liv, B19_grand_liv, B20_sp_grand_liv,
C05_buildings_in_compound, C06_rooms, C07_other_buildings,
D_no_plots, E01_water_use, E_no_group_count, E_yes_group_count,
E17_no_enough_water, E18_months_no_water, E19_period_use, E25_fees_water, F04_need_money,
F05_money_source, F05_money_source_other, F06_crops_contr, F08_emply_lab, F09_du_labour,
F10_liv_owned, F10_liv_owned_other, F_liv_count, F12_poultry, F14_items_owned,
F14_items_owned_other, G01_no_meals, G02_months_lack_food, gps.Latitude, gps.Longitude,
gps.Altitude, gps.Accuracy)
new_cols <- c("province", "district", "ward", "village", "years_farm", "num_members", "parents_live", "sp_parents_live",
"grand_live", "sp_grand_live", "buildings_in_compound", "rooms", "other_buildings", "num_plots",
"water_use", "irr_count", "not_irr_count", "are_months_no_water", "months_no_water", "water_method_years",
"fees_water", "need_money_change", "money_source", "money_source_other", "crops_income", "employ_labor",
"house_labor", "livestock", "livestock_other", "livestock_count", "poultry", "items_owned", "items_owned_other",
"num_meals", "months_lack_food", "gps_lat", "gps_long", "gps_alt", "gps_acc")
colnames(data.keep) <- new_cols
colnames(data.keep) <- new_cols
View(data.keep)
# ------ Data Cleaning
unique(data.keep$province)
unique(data.keep$district)
data.keep[district=="Bandula"]
data.keep[data.keep$district=="Bandula"]
data.keep[data.keep$district=="Bandula",]
View(bandula)
bandula <- data.keep[data.keep$district=="Bandula",]
View(bandula)
table(data.keep$district)
table(data.keep$ward)
table(data.keep$village)
# and ward Bandula, but the villages differ
df_keep_village <- data.keep %>% select(!c(province, district, ward))
colnames(df_keep_village)
table(df_keep_village$village)
df_renamed <- df_keep_village %>% mutate(village=replace(village=="Ruaca - Nhamuenda"|village=="Ruaca-Nhamuenda",
"Ruaca"))
df_renamed <- df_keep_village %>% mutate(village=replace(village=="Ruaca - Nhamuenda"|village=="Ruaca-Nhamuenda",
values="Ruaca"))
View(df_renamed)
table(df_renamed$village)
table(df_keep_village$village)
df_keep_village[df_keep_village$village=="Ruaca - Nhamuenda"]$village <- "Ruaca"
df_keep_village[df_keep_village$village=="Ruaca - Nhamuenda",]$village <- "Ruaca"
table(df_keep_village$village)
df_keep_village[df_keep_village$village=="Ruaca - Nhamuenda"|df_keep_village==
"Ruaca-Nhamuenda",]$village <- "Ruaca"
table(df_keep_village$village)
df_3 <- df_keep_village %>% filter(village!="49")
table(df_3$village)
table(df_3$village)
str(data)
str(df_3)
sum(is.na(df_3$years_farm))
sum(is.nan(df_3$years_farm))
sum(is.null(df_3$years_farm))
c_names <- colnames(df_3)
sapply(df_3[c_names], sum(is.na(.)))
sapply(df_3[c_names], sum(is.na()))
sapply(df_3[colnames], function(x) sum(is.na(x)))
sapply(df_3[c_names], function(x) sum(is.na(x)))
sapply(df_3[c_names], function(x) sum(is.nan(x)))
sapply(df_3[c_names], function(x) sum(is.null(x)))
str(df_3)
unique(df_3$years_farm)
unique(df_3$num_members)
unique(df_3$parents_live)
unique(df_3$sp_parents_live)
unique(df_3$grand_live)
unique(df_3$sp_grand_live)
unique(df_3$buildings_in_compound)
unique(df_3$rooms)
unique(df_3$other_buildings)
unique(df_3$num_plots)
unique(df_3$water_use)
unique(df_3$irr_count)
nrows(df_3[df_3$irr_counts]=="NULL")
nrow(df_3[df_3$irr_counts]=="NULL")
nrow(df_3)
sum(df_3[df_3$irr_counts=="NULL"])
nrow(df_3[df_3$irr_counts=="NULL"])
table(df_3$irr_count)
df_3[df_3$irr_count=="NULL"] <- NULL
df_3[df_3$irr_count=="NULL"]$irr_count <- NULL
df_3[df_3$irr_count=="NULL",]$irr_count <- NULL
table(df_3$irr_count)
View(df_3)
unique(df_3$irr_count)
df_3 <- df_keep_village %>% filter(village!="49")
unique(df_3$irr_count)
df_3[df_3$irr_count=="NULL",]$irr_count <- NULL
table(df_3$irr_count)
df_3 <- df_keep_village %>% filter(village!="49")
table(df_3$irr_count)
df_3[df_3$irr_count=="NULL",]$irr_count <- NA
table(df_3$irr_count)
unique(df_3$irr_count)
sum(is.na(df_3$irr_count))
str(df_3)
unique(df_3$not_irr_count)
table(df_3$not_irr_count)
df_3[df_3$not_irr_count=="NULL",]$not_irr_count <- NA
sum(is.na(df_3$not_irr_count))
# ----- NAs & NULLs & NANs
df_3[df_3=="NULL"] <- NA
sapply(df_3[c_names], function(x) sum(is.na(x)))
# ----- NAs & NULLs & NANs
c_names <- colnames(df_3)
str(df_3)
unique(df_3$are_months_no_water)
unique(df_3$months_no_water)
unique(df_3$crops_income)
unique(df_3$water_use)
unique(df_3$water_method_years)
unique(df_3$fees_water)
unique(df_3$need_money_change)
unique(df_3$money_source)
unique(df_3$money_source_other)
unique(df_3$employ_labor)
unique(df_3$house_labor)
unique(df_3$livestock)
unique(df_3$livestock_other)
unique(df_3$livestock_count)
unique(df_3$poultry)
unique(df_3$items_owned)
unique(df_3$items_owned_other)
unique(df_3$num_meals)
unique(df_3$months_lack_food)
unique(df_3$are_months_no_water)
# ------ Dropping
df_nother <- df_3 %>% select(!c(money_source_other, livestock_other, items_owned, items_owned_other))
unique(df_3$num_meals)
View(df_nother)
df_nother$months_no_water[1]
df_nother$months_no_water[2]
df_nother$months_no_water[2][1]
unlist[df_nother$months_no_water[2]]
typeof(df_nother$months_no_water[2])
str(df_nother)
# ------ Encoding
df_nother$livestock
# ------ Encoding - Make cols of form isXXX for Y/N or 0/1. Or of form eventMonth.
# ------ Have to get names from the character vectors, maybe as list?
listify <- function(column) {
noSpace <- strsplit(column, " ")
return(noSpace)
}
# ------ Encoding - Make cols of form isXXX for Y/N or 0/1. Or of form eventMonth.
# ------ Have to get names from the character vectors, maybe as list?
listify <- function(df, column) {
noSpace <- strsplit(df$column, " ")
df$column <- noSpace
}
listify(df_nother, livestock)
# ------ Encoding - Make cols of form isXXX for Y/N or 0/1. Or of form eventMonth.
# ------ Have to get names from the character vectors, maybe as list?
listify <- function(df, column) {
noSpace <- str_split_fixed(df$column, " ")
df$column <- noSpace
}
listify(df_nother, livestock)
df_nother$livestock
typeof(df_nother$livestock)
# ------ Encoding - Make cols of form isXXX for Y/N or 0/1. Or of form eventMonth.
# ------ Have to get names from the character vectors, maybe as list?
df_nother$livestock <- df_nother$livestock %>% str_replace_all("\\[|\\]", "")
df_nother$livestock
df_nother$livestock <- df_nother$livestock %>% str_replace_all(";", "")
df_nother$livestock
df_nother$livestock <- df_nother$livestock %>% str_replace_all("'", "")
df_nother$livestock
View(df_nother$livestock)
df_nother$livestock[1]
df_nother$livestock[2]
df_nother$livestock[2][6]
df_nother$livestock[2][5]
# ------ Dropping
df_nother <- df_3 %>% select(!c(money_source_other, livestock_other, items_owned, items_owned_other))
listify(df_nother, livestock)
# ------ Encoding - Make cols of form isXXX for Y/N or 0/1. Or of form eventMonth.
# ------ Have to get names from the character vectors, maybe as list?
listify <- function(df, column) {
df$column <- df$column %>% str_replace_all("\\[|\\]", "")
df$column <- df$column %>% str_replace_all(";", "")
df$column <- df$column %>% str_replace_all("'", "")
}
listify(df_nother, livestock)
